{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "import re\n",
    "import pandas as pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "payload = {\"CameFromQuickSearch\": \"No\"\n",
    "           ,\"CameFromSearchHubzone\": \"No\"\n",
    "           ,\"CameFromSearchTMOnLine\": \"No\"\n",
    "           ,\"JavaScriptOn\": \"No\"\n",
    "           ,\"MightNotGetSent\": \"Agr,Anemp,AnyAllGreen,AnyAllKeywords,AnyAllNaics,Area,AtLeastNoMore,CageCd,Cbona,Cbonc,CBT,Cdist,Cnty,CntyNm,CompanyName,CompanyNameSearch,CompanyUserId,Dbe,Delimiter,Dunses,E8a,E8acase,Edi,Edw,Edwosb,Ein,ExpCountry,ExpMainAct,ExpMrkt,ExportCd,FirmListColumns,FirmListColumnNamesHidden,FontSize,Gcc,Greens,Gsa,HubCert,InTMO,KeyWhere,Keywords,Mntr,Msa,Naicses,NumberOfRows,Password,Phone,PIM,Qas,Report,SaveDBHits,SbaDsn,SbaOffice,SbaSbc,Sbona,Sbonc,Sdb,SearchDB,Seckp,Secst,ShowRandomizer,Sics,Sort,State,Status,Suffix,Technet,Updated,UpdBefAft,UEI,UseOracle,Uscit,UserId,Wob,Wosb,VetSB,VetSerDis,Zip,DispAnyAllComment,DispAnyAllMSIE,DispDisclaimer,DispSectionLocation,DispSectionCertifications,DispSectionOwnership,DispSectionNaicsAndKeywords,DispSectionAreaAndTechnet,DispSectionUpdated,DispSectionBonding,DispSectionQas,DispSectionSize,DispSectionCapabilities,DispSectionSpecificFirm,DispSectionPrivSearch,DispSectionDisplayOptions\"\n",
    "           ,\"PageNames\": \"dsp_dsbs.cfm,dsp_profilelist.cfm,dsp_profile.cfm\"\n",
    "           ,\"PathNames\": \"/search,/pro-net/search,/dsbs/search,/dsbs\"\n",
    "           ,\"PIM\": \"P\"\n",
    "           ,\"SearchDB\": \"SBA\"\n",
    "           ,\"StartRow\": \"1\"\n",
    "           ,\"State\": \"CA\"\n",
    "           ,\"Cnty\": \"073\"\n",
    "           ,\"CntyNm\": \"SAN DIEGO\"\n",
    "           ,'Zip': '92127'\n",
    "           ,\"E8a\": \"N\"\n",
    "           ,\"wosb\": \"N\"\n",
    "           ,\"HubCert\": \"N\"\n",
    "           ,\"edwosb\": \"N\"\n",
    "           ,\"vetsb\": \"N\"\n",
    "           ,\"vetserdis\": \"N\"\n",
    "           ,\"AnyAllNaics\": \"Any\"\n",
    "           ,\"AnyAllGreen\": \"Any\"\n",
    "           ,\"AnyAllKeywords\": \"Any\"\n",
    "           ,\"KeyWhere\": \"O\"\n",
    "           # ,\"Area\": \"CON\"\n",
    "           ,\"AtLeastNoMore\": \"N\"\n",
    "           ,\"Gcc\": \"N\"\n",
    "           ,\"ExportCd\": \"N\"\n",
    "           ,\"CompanyNameSearch\": \"F\"\n",
    "           ,\"UpdBefAft\": \"A\"\n",
    "           ,\"Status\": \"A\"\n",
    "           ,\"NumberOfRows\": \"99999999\"\n",
    "           ,'FirmListColumns': 'I01,I37,I35,P01,I11,I20,I16,I15,I18,I12a,I10,I29,I27,I30,I31,I25,I03,I17,I09,I28,I12,I21,I13,E01,E11,E03,E04,E05'\n",
    "           ,\"FirmListColumnNamesHidden\": \"Name of Firm;Contact;Address and City, State Zip;Capabilities Narrative;E-mail Address;CAGE Code;Congr. Dist.;County Code;UEI;E-Mall Page URL;Fax Number;Fiscal Year Ends;In TECH-Net?;Incorp. Country;Incorp. State;Last Updated;Main/Branch;Metro Stat Area;Phone Number;Trade Name;WWW Page URL;Year Established;Legal Structure;Business Type (Service, Construction, etc);Ownership/Self-Certs (Minority, Veteran, Woman, etc);NAICS, All (for which firm is small);NAICS, Buy Green and Small;NAICS, Primary and Small\"\n",
    "           ,\"FirmListColumnNamesDisplay\": \"Name of Firm; Contact; Address and City, State Zip; Capabilities Narrative; E-mail Address; CAGE Code; Congr. Dist.; County Code; UEI; E-Mall Page URL; Fax Number; Fiscal Year Ends; In TECH-Net?; Incorp. Country; Incorp. State; Last Updated; Main/Branch; Metro Stat Area; Phone Number; Trade Name; WWW Page URL; Year Established; Legal Structure; Business Type (Service, Construction, etc); Ownership/Self-Certs (Minority, Veteran, Woman, etc); NAICS, All (for which firm is small); NAICS, Buy Green and Small; NAICS, Primary and Small\"\n",
    "           ,\"FontSize\": \"10pt\"\n",
    "           ,\"Suffix\": \"xls\"\n",
    "           ,\"Report\": \"M\"\n",
    "           ,\"Delimiter\": \"C\"\n",
    "           ,\"Submit\": \"Search Using These Criteria\"}\n",
    "\n",
    "zips = [x for x in \"\"\"92007 92003 92037 91901 92101 91902\n",
    "92008 92004 92093 91905 92102 91910\n",
    "92009 92025 92106 91906 92103 91911\n",
    "92010 92026 92107 91916 92104 91913\n",
    "92011 92027 92108 91917 92105 91914\n",
    "92014 92028 92109 91931 92113 91915\n",
    "92024 92029 92110 91934 92114 91932\n",
    "92054 92036 92111 91935 92115 91950\n",
    "92055 92059 92117 91941 92116 92118\n",
    "92056 92060 92119 91942 92134 92135\n",
    "92057 92061 92120 91945 92136 92154\n",
    "92058 92064 92121 92121 91948 92139\n",
    "92155 92067 92065 92122 91962 92182\n",
    "92173 92075 92066 92123 91963\n",
    "92081 92069 92124 91977\n",
    "92083 92070 92126 91978\n",
    "92084 92078 92130 91980\n",
    "92091 92082 92131 92019\n",
    "92672 92086 92140 92020\n",
    "92096 92145 92021\n",
    "92127 92161 92040\n",
    "92128 92071\n",
    "92129\n",
    "92259\n",
    "92536\"\"\".split()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "post_url = 'https://dsbs.sba.gov/search/dsp_profilelist.cfm?RequestTimeout=180'\n",
    "num_results = []\n",
    "overall = pd.DataFrame([])\n",
    "\n",
    "for z in zips:\n",
    "    payload['Zip'] = z\n",
    "    if z == '92121':\n",
    "        payload[\"AtLeastNoMore\"] = 'N'\n",
    "        payload['Anemp'] = '4'\n",
    "        req = requests.post(post_url, data=payload)\n",
    "        soup = BeautifulSoup(req.text, 'html.parser')\n",
    "        try:\n",
    "            x = pd.DataFrame([\n",
    "                [y.replace(\"\\\"\", \"\") for y in x.split(\"\\\",\\\"\")] \n",
    "                for x in soup.select(\"pre\")[0].text.split(\"\\n\")\n",
    "            ])\n",
    "            x.columns = x.iloc[0]\n",
    "            x = x.iloc[1:-1].drop(columns=['View'], errors='ignore')\n",
    "            overall = pd.concat([overall, x])\n",
    "            print(z)\n",
    "        except:\n",
    "            print(f\"Error scraping zip: {z}\")\n",
    "            print(soup.prettify())\n",
    "\n",
    "        # Switch AtLeastNoMore and re-post\n",
    "        payload[\"AtLeastNoMore\"] = 'Y'\n",
    "        req = requests.post(post_url, data=payload)\n",
    "        soup = BeautifulSoup(req.text, 'html.parser')\n",
    "        try:\n",
    "            x = pd.DataFrame([\n",
    "                [y.replace(\"\\\"\", \"\") for y in x.split(\"\\\",\\\"\")] \n",
    "                for x in soup.select(\"pre\")[0].text.split(\"\\n\")\n",
    "            ])\n",
    "            x.columns = x.iloc[0]\n",
    "            x = x.iloc[1:-1].drop(columns=['View'], errors='ignore')\n",
    "            overall = pd.concat([overall, x])\n",
    "            print(z)\n",
    "        except:\n",
    "            print(f\"Error scraping zip (AtLeastNoMore=Y): {z}\")\n",
    "            print(soup.prettify())\n",
    "\n",
    "        # Remove these keys so next loop doesn't reuse them\n",
    "        payload.pop('AtLeastNoMore', None)\n",
    "        payload.pop('Anemp', None)\n",
    "    else:\n",
    "        req = requests.post(post_url, data=payload)\n",
    "        soup = BeautifulSoup(req.text, 'html.parser')\n",
    "        try:\n",
    "            x = pd.DataFrame([\n",
    "                [y.replace(\"\\\"\", \"\") for y in x.split(\"\\\",\\\"\")] \n",
    "                for x in soup.select(\"pre\")[0].text.split(\"\\n\")\n",
    "            ])\n",
    "            x.columns = x.iloc[0]\n",
    "            x = x.iloc[1:-1].drop(columns=['View'], errors='ignore')\n",
    "            overall = pd.concat([overall, x])\n",
    "            print(z)\n",
    "        except:\n",
    "            print(f\"Error scraping zip: {z}\")\n",
    "            print(soup.prettify())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                             Name of Firm                   ANGELA EASTVOLD PHD ABPP LLC\n",
       "unknown                                            ANGELA EASTVOLD\n",
       "unknown                                                         \n",
       "Address, line 1                            120 BIRMINGHAM DRIVE STE 110A\n",
       "Address, line 2                                                     \n",
       "City                                                         CARDIFF\n",
       "State                                                              CA\n",
       "Zip                                                          92007-1737\n",
       "Capabilities Narrative                                                 \n",
       "E-mail Address                          angela@angelaeastvoldphd.com\n",
       "CAGE Code                                                      7RAK0\n",
       "Congr. Dist.                                                       49\n",
       "County Code                                                       073\n",
       "UEI                                                     YQJLDPC1AJK9\n",
       "E-Mall Page URL                                                     \n",
       "Fax Number                                                          \n",
       "Fiscal Year Ends                                                  1231\n",
       "In TECH-Net?                                                         \n",
       "Incorp. Country                                                   USA\n",
       "Incorp. State                                                      CA\n",
       "Last Updated                                             07/26/2024\n",
       "Main/Branch                                                   Branch\n",
       "Metro Stat Area                                                   7320\n",
       "Phone Number                                             760-420-2640\n",
       "Trade Name                                                           \n",
       "WWW Page URL                                                         \n",
       "Year Established                                                 2016\n",
       "Legal Structure                                                      \n",
       "Business Type (Service, Construction, etc)                           \n",
       "Ownership/Self-Certs (Minority, Veteran, Woman, etc)    Self-Certified Small Disadvantaged Busi...\n",
       "NAICS, All (for which firm is small)                   541990, 621330\n",
       "NAICS, Buy Green and Small                                         \n",
       "NAICS, Primary and Small                                           \n",
       "Name: 1, dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Example: Show first row of the current table\n",
    "overall.iloc[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# -----------------------------------------------------\n",
    "# New Code to Create Full Address & ZipOnly, Then Export\n",
    "# -----------------------------------------------------\n",
    "# 1. Create a 'FullAddress' column (adjust field names if needed)\n",
    "\n",
    "overall['FullAddress'] = (\n",
    "    overall['Address, line 1'].fillna('') + ' ' +\n",
    "    overall['Address, line 2'].fillna('') + ' ' +\n",
    "    overall['City'].fillna('') + ', ' +\n",
    "    overall['State'].fillna('') + ' ' +\n",
    "    overall['Zip'].fillna('')\n",
    ")\n",
    "\n",
    "# 2. Create a 'ZipOnly' column (just the first 5 digits)\n",
    "overall['ZipOnly'] = overall['Zip'].str.extract(r'(\\d{5})')\n",
    "\n",
    "# 3. Remove duplicates. If you only want to check certain columns,\n",
    "#    pass them to 'subset'. E.g., subset=[\"Name of Firm\",\"Zip\"]\n",
    "overall.drop_duplicates(inplace=True)\n",
    "\n",
    "# 4. Save final data (including new columns) to CSV\n",
    "overall.to_csv(\"raw_sd_business_data.csv\", index=False)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
